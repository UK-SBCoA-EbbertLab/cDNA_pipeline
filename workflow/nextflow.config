// CONFIGURATION FILE


// Pipeline parameter default values, can be modified by user when calling pipeline on command line (e.g. --data_fq sample_1.fastq) ##
params.ont_reads_fq = 'None' // Input fastq reads
params.ont_reads_txt = 'None' // Input sequencing summary files
params.ref = 'None' // Input reference fasta file
params.housekeeping = 'None' // Input bed file for housekeeping genes (RSEQc)
params.annotation = 'None' // Input GTF/GFF genomic annotation
params.out_dir = "output_directory/" // Output directory for pipeline results
params.is_chm13 = "False" // Logical, is the reference CHM13?
params.fast5_dir = 'None' // Fast5 directory if basecalling data
params.basecall_id = "None" // Sample id for files being basecalled
params.basecall_config = "None" // Basecalling configuration as specified in guppy
params.ercc = "None" // Want to concatenate ERCC GTF to CHM13 GFF? Add the ERCC gtf file here
params.cdna_kit = "PCS111" // cDNA sequencing kit adapters for Pychopper to trim and orient reads
params.multiqc_config = "None" // MultiQC configuration file
params.is_discovery = "None" // Logical, do you want to perform discovery using Bambu? True = Yes
params.NDR = "auto" // NDR value for Bambu novel discovery filtering - Leave it on Auto for most applications
params.bambu_track_reads = "False" // Logical, Track Bambu read assignments. True = Track. Tracking uses more memory, but allows you to extract reads that align to specific transcripts
params.mapq = "0" // MAPQ filtering threshold for bam files, 0 for no filtering
params.step = "None" // Which step of the pipeline to perform. 1 = Basecalling, 2 = Pre-processing, 3 = Discovery and quantification
params.multiqc_input = "None" // Directory with MultiQC input for making report.
params.bambu_rds = "None" // Directory containing individually pre-processed Bambu RDS files
params.fai = "None" // Index file for reference genome
params.bam = "None" // Unfiltered bam file input if you want to start from the bam filtering step
params.bai = "None" // Unfiltered bam index file input if you want to start from the bam filtering step

process { 

    // Define job scheduler parameters for jobs that require little memory computation/memory ##
    withLabel: tiny {
        executor='slurm'
        clusterOptions='--partition normal --time 00:15:00 --account cca_mteb223_uksr --nodes 1 --ntasks 4 --mem 20G'
    }



    withLabel: small {
        executor='slurm'
        clusterOptions='--partition normal --time 1:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 8 --mem 40G'
    }



    // Define job scheduler parameters for jobs that require medium computation/memory ##

    withLabel: medium_small {
        
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 12 --mem 48G'
        }


    withLabel: medium {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 16 --mem 64G'
        }

    withLabel: medium_large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 20 --mem 80G'
    }

    Define job scheduler parameters for jobs that require lots of computation/memory ##

    withLabel: large {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 50 --mem 200G'
    }

    withLabel: huge {
        executor='slurm'
        clusterOptions='--partition normal --time 23:00:00 --account cca_mteb223_uksr --nodes 1 --ntasks 8 --mem 500G'
    }

    ## Define local execution

    withLabel: local {
        executor='local'
    }

    withLabel: gpu {
        clusterOptions='--partition P4V12_SKY32M192_L --time 00:15:00 --account gol_mteb223_uksr --gres=gpu:1 --mem 16G'
    }

    // Define the singularity containers for each process, will pull containers from the cloud

    // Nanopore
    withName: "(GFFCOMPARE|MAKE_INDEX_cDNA|MINIMAP2_cDNA|MINIMAP2_QC|FILTER_BAM|PYCHOPPER|STRINGTIE_ONT_cDNA|MAKE_FAI|MAKE_TRANSCRIPTOME)" {
        container = "library://ebbertlab/nanopore_cdna/nanopore:latest"
    }

    // Quality Control
    withName: "(MULTIQC_GRCh38|MULTIQC_CHM13|RSEQC|PYCOQC|DECOMPRESS|TRIM_GALORE|CHM13_GTF_ERCC|CHM13_GTF)" {
        container = "library://ebbertlab/nanopore_cdna/quality_control:latest"
    }

    // Basecalling
    withName: "(BASECALL|GATHER_BASECALL)" {
        container = "library://ebbertlab/nanopore_cdna/guppy:latest"
        singularity.runOptions='--nv'
    }

    // Bambu
    withName: "(BAMBU_PREP|BAMBU_DISCOVERY|BAMBU_QUANT)" {
        container = "library://ebbertlab/nanopore_cdna/bambu:latest"
    }

}



// Define executor type and maximum queue size for jobs at once ##

executor {

    name="slurm"
    queueSize = 50
}

// Point to singularity image with the tools necessary to run the pipeline

singularity {
    
    enabled = true
}

